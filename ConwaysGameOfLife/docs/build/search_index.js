var documenterSearchIndex = {"docs":
[{"location":"lecture/2-julia_project_structure/#Julia:-Project-Structure","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"This lecture focuses on the structure and management of Julia-specific projects. We will cover how to create a project using the Package Manager, the purpose of various directories and files, and best practices for maintaining a Julia project.","category":"page"},{"location":"lecture/2-julia_project_structure/#Creating-a-Project-Using-Package-Manager","page":"Julia: Project Structure","title":"Creating a Project Using Package Manager","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"Using the Julia REPL and the Package Manager (Pkg)\nExample command:","category":"page"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"julia> # Press `]` button to go to pkg mode\npkg> generate MyProject","category":"page"},{"location":"lecture/2-julia_project_structure/#Key-Folders-in-a-Julia-Project","page":"Julia: Project Structure","title":"Key Folders in a Julia Project","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/#src-Folder","page":"Julia: Project Structure","title":"src Folder","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"The src folder: Where the source code lives\nStructure and naming conventions for source files\nCan contain multiple files (modules)","category":"page"},{"location":"lecture/2-julia_project_structure/#docs-Folder","page":"Julia: Project Structure","title":"docs Folder","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"Where the Documentation of the project lives\nTools for generating documentation in Julia, e.g., Documenter.jl","category":"page"},{"location":"lecture/2-julia_project_structure/#examples-Folder","page":"Julia: Project Structure","title":"examples Folder","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"The examples folder: Contains example scripts and notebooks\nDemonstrating usage and features of the project","category":"page"},{"location":"lecture/2-julia_project_structure/#test-Folder","page":"Julia: Project Structure","title":"test Folder","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"The folder containing unit tests in the file runtests.jl, explained later","category":"page"},{"location":"lecture/2-julia_project_structure/#README-File","page":"Julia: Project Structure","title":"README File","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"Every Git needs a README.md file, first starting point when someone opens the repo\nKey elements to include: project description, installation instructions, usage examples, contact info, ...","category":"page"},{"location":"lecture/2-julia_project_structure/#Project.toml-and-Manifest.toml","page":"Julia: Project Structure","title":"Project.toml and Manifest.toml","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"Project.toml: Managing project dependencies and environment settings\nActivate (Leftrightarrow download and use all external packages from Project.toml)","category":"page"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"using Pkg\nPkg.activate(\".\")  # or press \"]\" to go into pkg mode and then type \"actiavate\" and hit enter\n# Activating project at `~/Desktop/gits/nmh/SustainableSoftwareEngineering.jl`","category":"page"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"Manifest.toml: Detailed state of the environment for reproducibility (not necessarily needed in Git)","category":"page"},{"location":"lecture/2-julia_project_structure/#What,-what-is-TOML?","page":"Julia: Project Structure","title":"What, what is TOML?","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"TOML (Tom's Obvious, Minimal Language) is a simple, easy-to-read configuration file format. Designed by Tom Preston-Werner in 2013, it aims to be more human-readable and writable than formats like XML or JSON.","category":"page"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"# This is a TOML document\n\ntitle = \"TOML Example\"\n\n[owner]  # a table => key-value pairs\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00-08:00\n\n[database]  # another table\nenabled = true\nports = [ 8000, 8001, 8002 ]\ndata = [ [\"delta\", \"phi\"], [3.14] ]\ntemp_targets = { cpu = 79.5, case = 72.0 }\n\n[servers]\n\n[servers.alpha]\nip = \"10.0.0.1\"\nrole = \"frontend\"\n\n[servers.beta]\nip = \"10.0.0.2\"\nrole = \"backend\"","category":"page"},{"location":"lecture/2-julia_project_structure/#Optional-Files","page":"Julia: Project Structure","title":"Optional Files","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/#LICENSE","page":"Julia: Project Structure","title":"LICENSE","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"Adding a LICENSE file: Types of licenses and their implications","category":"page"},{"location":"lecture/2-julia_project_structure/#CODE*OF*CONDUCT","page":"Julia: Project Structure","title":"CODEOFCONDUCT","text":"","category":"section"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"The importance of a CODE_OF_CONDUCT.md file\nFostering an inclusive and respectful community","category":"page"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"","category":"page"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"In conclusion, a well-structured Julia project not only facilitates development and collaboration but also ensures the reproducibility and integrity of the project. The use of Project.toml and Manifest.toml files in conjunction with the Julia Package Manager plays a crucial role in managing dependencies and maintaining a consistent project environment.","category":"page"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"Consider this repository as template/good-practise!","category":"page"},{"location":"lecture/2-julia_project_structure/","page":"Julia: Project Structure","title":"Julia: Project Structure","text":"For further reading and resources, refer to the Julia documentation.","category":"page"},{"location":"api/#Developer-Documentation","page":"API","title":"Developer Documentation","text":"","category":"section"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ConwaysGameOfLife]\nPrivate = true\nOrder   = [:function, :type]","category":"page"},{"location":"api/#Main.ConwaysGameOfLife.get_living_neighbours-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.get_living_neighbours","text":"getlivingneighbours(cell) Returns the number of living cells in the neighbours Array of 'cell'\n\nArguments\n\ncell::Cell: The cell to be checked\n\nExamples\n\njulia> cell = Cell()\njulia> cell1 = Cell()\njulia> set_alive(cell1)\njulia> cell2 = Cell()\njulia> set_dead(cell2)\njulia> set_neighbours(cell,cell1)\njulia> set_neighbours(cell,cell2)\njulia> get_living_neighbours(cell)\n1\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.get_option-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.get_option","text":"getoption(option) Returns different matrixes to use as an initstate for Conways Game of Life depending on 'option'. May require a readline() to determine the size.\n\nArguments\n\noption::String: String to get the corresponding option\n\nExamples\n\njulia> option = get_option(\"Random\")\njulia> option\nrand([0,1], y_size, x_size)\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.main-Tuple{}","page":"API","title":"Main.ConwaysGameOfLife.main","text":"main() Initializes and runs a game of Conways Game of Life. It also initializes the interactive function of the GLMakie Buttons.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.pulsar-Tuple{}","page":"API","title":"Main.ConwaysGameOfLife.pulsar","text":"spacecannon() Returns a matrix of a pulsar to use as an initstate for Conways Game of Life\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.set_alive-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.set_alive","text":"set_dead(cell) Sets the alive attribute of 'cell' to false\n\nArguments\n\ncell::Cell: The cell to be set dead\n\nExamples\n\njulia> cell = Cell()\njulia> set_dead(cell)\njulia> cell.alive\nfalse\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.set_button-Tuple{Any, Any}","page":"API","title":"Main.ConwaysGameOfLife.set_button","text":"set_button(cell, button) Sets the button attribute of 'cell' to 'button'. The button is from the GLMakie package\n\nArguments\n\ncell::Cell: The cell to change the button\nbutton::Button: The button to be set to the cell\n\nExamples\n\njulia> cell = Cell()\njulia> fig = Figure()\njulia> green_button = Button(fig[1,1], buttoncolor = green)\njulia> set_button(cell,button)\njulia> cell.button\ngreen_button\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.set_dead-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.set_dead","text":"set_alive(cell) Sets the alive attribute of 'cell' to true\n\nArguments\n\ncell::Cell: The cell to be set alive\n\nExamples\n\njulia> cell = Cell()\njulia> set_alive(cell)\njulia> cell.alive\ntrue\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.set_neighbours-Tuple{Any, Any}","page":"API","title":"Main.ConwaysGameOfLife.set_neighbours","text":"set_neighbours(cell, neighbours) Appends a 'neighbours' to the neighbours array of 'cell'\n\nArguments\n\ncell::Cell: The cell to change the button\nneighbours::Cell: The cell to be added to neighbours\n\nExamples\n\njulia> cell = Cell()\njulia> cell_new = Cell()\njulia> set_neighbours(cell,cell_new)\njulia> cell.neighbours\nArray([cell_new])\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.should_update-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.should_update","text":"shouldupdatecell(cell) Checks whether 'cell' should be updated for the next iteration of Conways Game of Life\n\nArguments\n\ncell::Cell: The cell to be checked\n\nExamples\n\njulia> should_update_cell(living_cell_with_four_living_neighbours)\nfalse\n\njulia> should_update_cell(dead_cell_with_three_living_neighbours)\ntrue\n\njulia> should_update_cell(living_cell_with_two_living_neighbour)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.should_update_cell_alive-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.should_update_cell_alive","text":"shouldupdatecell_alive(cell) Checks whether 'cell' should be updated for the next iteration of Conways Game of Life assuming 'cell.alive = true' \n\nArguments\n\ncell::Cell: The cell to be checked\n\nExamples\n\njulia> should_update_cell_alive(cell_with_four_living_neighbours)\ntrue\n\njulia> should_update_cell_alive(cell_with_three_living_neighbours)\nfalse\n\njulia> should_update_cell_alive(cell_with_one_living_neighbour)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.should_update_cell_dead-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.should_update_cell_dead","text":"shouldupdatecell_dead(cell) Checks whether 'cell' should be updated for the next iteration of Conways Game of Life assuming 'cell.alive = false'\n\nArguments\n\ncell::Cell: The cell to be checked\n\nExamples\n\njulia> should_update_cell_dead(cell_with_four_living_neighbours)\nfalse\n\njulia> should_update_cell_dead(cell_with_three_living_neighbours)\ntrue\n\njulia> should_update_cell_dead(cell_with_two_living_neighbour)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.space_cannon-Tuple{}","page":"API","title":"Main.ConwaysGameOfLife.space_cannon","text":"spacecannon() Returns a matrix of a glider cannon to use as an initstate for Conways Game of Life\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.update_cell-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.update_cell","text":"update_cell(cell) Updates the 'color' and 'alive' attribute of 'cell' if the 'update' attribute is true. White, dead cells will become black, alive cells and vice versa.\n\nArguments\n\ncell::Cell: The cell to be updated\n\nExamples\n\njulia> update_cell(white_dead_cell_update_true)\ntrue\n\njulia> update_cell(white_dead_cell_update_false)\nfalse\n\njulia> update_cell(black_alive_cell_update_true)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.update_game-Tuple{Any}","page":"API","title":"Main.ConwaysGameOfLife.update_game","text":"update_game(gameboard) initializes the next iteration of Conways Game of Life\n\nArguments\n\ngameboard::Gameboard: The current iteration of the gameboard\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.ConwaysGameOfLife.Cell","page":"API","title":"Main.ConwaysGameOfLife.Cell","text":"This mutable struct initializes and contains all the information needed to simulate a single cell in Conways Game of Life\n\nFields\n\n'neighbours::Array': An array with all neighbours of the cell\n'alive::Bool': A bool stating whether the cell is alive or note\n'update::Bool': A bool stating wheter the cell should be updated in the next iteration\n'button::Button': A GLMakie button to visualize the cell\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.ConwaysGameOfLife.Gameboard","page":"API","title":"Main.ConwaysGameOfLife.Gameboard","text":"This mutable struct initializes and contains all the information needed to simulate Conways Game of Life\n\nFields\n\n'initial_state::Matrix': Matrix filled with 0's and 1's. 0's are initialized as dead cells and 1's as living cells on their respective position in the matrix.\n'currentstate::Matrix': A matrix of the currentiteration of the game. Every entry is of type 'Cell' and contains the relevant information for the next iteration.\n'gamesize::Tuple': A tuple with the dimensions of 'initialstate' in form of (y,x)\n'fig::Figure': A GLMakie 'Figure' to visualize the game\n'nextButton::Button': A GLMakie 'Button' to initialize the next iteration\n\n\n\n\n\n","category":"type"},{"location":"api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"lecture/0-intro/#Basics-of-Sustainable-Software-Engineering-in-Julia","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Sustainable Software Engineering is an essential aspect of modern software development, focusing on practices that ensure long-term efficiency, maintainability, and scalability of software projects. This introduction covers the core principles of Sustainable Software Engineering, including the use of Git for version control, the importance of testing, the role of documentation, and the specifics of applying these practices in the Julia programming language.","category":"page"},{"location":"lecture/0-intro/#Basic-Introduction-to-Linux-Shell","page":"Basics of Sustainable Software Engineering in Julia","title":"Basic Introduction to Linux Shell","text":"","category":"section"},{"location":"lecture/0-intro/#Overview","page":"Basics of Sustainable Software Engineering in Julia","title":"Overview","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"The Linux Shell is a command-line interface (CLI) used in Linux operating systems. It allows users to interact with the system by typing commands, rather than using a graphical interface.","category":"page"},{"location":"lecture/0-intro/#Accessing-the-Shell-on-UNIX-(maxOS)","page":"Basics of Sustainable Software Engineering in Julia","title":"Accessing the Shell on UNIX (+maxOS)","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Terminal: Open the terminal application from your Linux desktop environment.","category":"page"},{"location":"lecture/0-intro/#Accessing-the-Shell-on-Windows","page":"Basics of Sustainable Software Engineering in Julia","title":"Accessing the Shell on Windows","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Git Bash: Has most of the common tools included.\nOther options: PowerShell, WSL, ...","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"(Image: Alt text)","category":"page"},{"location":"lecture/0-intro/#Basic-Commands","page":"Basics of Sustainable Software Engineering in Julia","title":"Basic Commands","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"pwd - Print Working Directory. Shows the current directory you are in.\nls - Lists files and directories in the current directory.\nls -l: Detailed list.\nls -a: Includes hidden files.\ncd - Change Directory.\ncd ..: Move one directory up.\ncd /path/to/directory: Move to a specific directory.\nmkdir - Make a new directory.\nrmdir - Remove an empty directory.\ntouch - Create a new empty file.\ncp - Copy files or directories.\ncp source destination: Copy source to destination.\nmv - Move or rename files or directories.\nrm - Remove files or directories.\nrm -r: Recursive remove (for directories).\necho - Display a line of text.\ncat - Concatenate and display file content.\ngrep - Search text using patterns.\nman - Display the manual of a command.","category":"page"},{"location":"lecture/0-intro/#System-Information","page":"Basics of Sustainable Software Engineering in Julia","title":"System Information","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"df: Report file system disk space usage.\ntop: Display Linux tasks.","category":"page"},{"location":"lecture/0-intro/#Tips","page":"Basics of Sustainable Software Engineering in Julia","title":"Tips","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Use the Tab key for auto-completing commands and file names.\nUse up and down arrow keys to navigate through command history.","category":"page"},{"location":"lecture/0-intro/#Introduction-to-Markdown","page":"Basics of Sustainable Software Engineering in Julia","title":"Introduction to Markdown","text":"","category":"section"},{"location":"lecture/0-intro/#What-is-Markdown?","page":"Basics of Sustainable Software Engineering in Julia","title":"What is Markdown?","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world's most popular markup languages.","category":"page"},{"location":"lecture/0-intro/#Why-Use-Markdown?","page":"Basics of Sustainable Software Engineering in Julia","title":"Why Use Markdown?","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Simplicity: Markdown is easy to learn and use.\nPortability: Markdown files are plain text, so they're readable on any device.\nFlexibility: You can convert Markdown to HTML, PDF, and more.","category":"page"},{"location":"lecture/0-intro/#Basic-Syntax","page":"Basics of Sustainable Software Engineering in Julia","title":"Basic Syntax","text":"","category":"section"},{"location":"lecture/0-intro/#Headings","page":"Basics of Sustainable Software Engineering in Julia","title":"Headings","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Use # for headings. More #s mean smaller headings.","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"# Heading 1\n## Heading 2\n#### Heading 3","category":"page"},{"location":"lecture/0-intro/#Emphasis","page":"Basics of Sustainable Software Engineering in Julia","title":"Emphasis","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Italic: Use * or _ around the text.\nBold: Use ** or __ around the text.","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"*Italic text*\n**Bold text**","category":"page"},{"location":"lecture/0-intro/#Lists","page":"Basics of Sustainable Software Engineering in Julia","title":"Lists","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"For unordered lists, use *, +, or -. For ordered lists, simply number them.","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"- Item 1\n- Item 2\n  - Sub Item 1\n  - Sub Item 2","category":"page"},{"location":"lecture/0-intro/#Links-and-Images","page":"Basics of Sustainable Software Engineering in Julia","title":"Links and Images","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Links: [Text](URL)\nImages: ![Alt Text](URL)","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"[Google](https://www.google.com)\n![Image](image_url.jpg)","category":"page"},{"location":"lecture/0-intro/#Code","page":"Basics of Sustainable Software Engineering in Julia","title":"Code","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Inline code: Use backticks , Inline code\nCode blocks: Use triple backticks with optional language identifier","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"1+1\n# 2","category":"page"},{"location":"lecture/0-intro/#Blockquotes","page":"Basics of Sustainable Software Engineering in Julia","title":"Blockquotes","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Use > for block quotes.","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"> This is a blockquote.","category":"page"},{"location":"lecture/0-intro/#Integrated-Development-Environment-(IDE)","page":"Basics of Sustainable Software Engineering in Julia","title":"Integrated Development Environment (IDE)","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"VS Code: All-in-one solution, quite good for Julia programming\nOther choices: Vim, Emacs, Atom, Jetbrains, ...","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"(Image: Alt text)","category":"page"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"Source: VSCode docu","category":"page"},{"location":"lecture/0-intro/#Further-Reading/References","page":"Basics of Sustainable Software Engineering in Julia","title":"Further Reading/References","text":"","category":"section"},{"location":"lecture/0-intro/","page":"Basics of Sustainable Software Engineering in Julia","title":"Basics of Sustainable Software Engineering in Julia","text":"CLick PDF slides in https://thsn.dev/blog/publishing-reproducable-numerics\nhttps://aeturrell.github.io/coding-for-economists/wrkflow-version-control.html\nhttps://merely-useful.tech/py-rse/git-cmdline.html","category":"page"},{"location":"lecture/3-julia_documentation/#Julia:-Documentation","page":"Julia: Documentation","title":"Julia: Documentation","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"In this lecture, we'll explore how to effectively document Julia code. We'll cover the use of doc strings, introduce Documenter.jl for creating comprehensive documentation, and discuss how to build and host a documentation website.","category":"page"},{"location":"lecture/3-julia_documentation/#Doc-Strings-in-Julia","page":"Julia: Documentation","title":"Doc Strings in Julia","text":"","category":"section"},{"location":"lecture/3-julia_documentation/#Basics-of-Doc-Strings","page":"Julia: Documentation","title":"Basics of Doc Strings","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Docstrings: Documentation that lives side-by-side with the source code","category":"page"},{"location":"lecture/3-julia_documentation/#Advanced-Features-in-Doc-Strings","page":"Julia: Documentation","title":"Advanced Features in Doc Strings","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Including mathematical expressions using LaTeX syntax\nAdding code examples within doc strings\nDocumenting function signatures for clarity\nIt's best practice to write informative and clear doc strings","category":"page"},{"location":"lecture/3-julia_documentation/#Code-Example:-Writing-a-Doc-String","page":"Julia: Documentation","title":"Code Example: Writing a Doc String","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Here's a simple example of how to write a doc string in Julia:","category":"page"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"\"\"\"\n    add(x, y)\n\nCompute the sum of `x` and `y`.\n\n# Arguments\n- `x::Int`: The first integer\n- `y::Int`: The second integer\n\n## Mathematical formula\n\n```math\n  (x,y) \\\\mapsto x+y\n```\n\n# Examples\n```julia\njulia> add(2, 3)\n5\n```\n\"\"\"\nfunction add(x::Int, y::Int)\nreturn x + y\nend","category":"page"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"This example shows how to document a function's purpose, its arguments, and provide a usage example.","category":"page"},{"location":"lecture/3-julia_documentation/#Introduction-to-Documenter.jl","page":"Julia: Documentation","title":"Introduction to Documenter.jl","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Documenter.jl is a tool for producing documentation in Julia. We'll look at how to set it up and use it to generate high-quality documentation for your projects.","category":"page"},{"location":"lecture/3-julia_documentation/#Setting-Up-Documenter.jl","page":"Julia: Documentation","title":"Setting Up Documenter.jl","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Installing Documenter.jl (import Pkg; Pkg.add(\"Documenter\"))\nBasic setup and configuration","category":"page"},{"location":"lecture/3-julia_documentation/#Creating-an-Index-with-Documenter.jl","page":"Julia: Documentation","title":"Creating an Index with Documenter.jl","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Organizing your documentation structure\nWriting an index.md file to serve as the entry point\nSee example docu (live)","category":"page"},{"location":"lecture/3-julia_documentation/#Including-Additional-Markdown-Files","page":"Julia: Documentation","title":"Including Additional Markdown Files","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"How to integrate additional markdown files into your documentation\nStructuring and linking various parts of the documentation for better navigation","category":"page"},{"location":"lecture/3-julia_documentation/#Rendering-Examples-Automatically","page":"Julia: Documentation","title":"Rendering Examples Automatically","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Utilizing Documenter.jl to automatically execute and render code examples\nEnsuring that examples in the documentation remain up-to-date and functional","category":"page"},{"location":"lecture/3-julia_documentation/#Inspecting-the-resulting-index.html","page":"Julia: Documentation","title":"Inspecting the resulting index.html","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Generating the HTML documentation locally, and open in local webbrowser","category":"page"},{"location":"lecture/3-julia_documentation/#Optional:-Building-a-Documentation-Website","page":"Julia: Documentation","title":"Optional: Building a Documentation Website","text":"","category":"section"},{"location":"lecture/3-julia_documentation/#Optional:-Continuous-Integration-for-Documentation-Updates","page":"Julia: Documentation","title":"Optional: Continuous Integration for Documentation Updates","text":"","category":"section"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"Setting up CI workflows to automatically update documentation and host it\nRather needed for big open source projects","category":"page"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"","category":"page"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"To conclude, effective documentation is crucial for any Julia project. Utilizing doc strings and Documenter.jl can greatly enhance the usability and accessibility of your code. Remember, good documentation is as important as the code itself!","category":"page"},{"location":"lecture/3-julia_documentation/","page":"Julia: Documentation","title":"Julia: Documentation","text":"For more details, visit the Documenter.jl documentation.","category":"page"},{"location":"#SustainableSoftwareEngineering.jl","page":"Home","title":"SustainableSoftwareEngineering.jl","text":"","category":"section"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"lecture/1-git/#Version-Control:-Introduction-to-Git","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"","category":"section"},{"location":"lecture/1-git/#What-is-Git?","page":"Version Control: Introduction to Git","title":"What is Git?","text":"","category":"section"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"Git is a distributed version control system designed to handle everything from small to very large projects with speed and efficiency. It is used to track changes in source code during software development, enabling multiple developers to work together on non-linear development.","category":"page"},{"location":"lecture/1-git/#Key-Features-of-Git","page":"Version Control: Introduction to Git","title":"Key Features of Git","text":"","category":"section"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"Distributed Version Control: Each developer has a full copy of the project, including its history, which means work can be done offline and later synced with the central repository.\nBranching and Merging: Git allows the creation of branches to experiment with new features. These branches can be merged back into the main branch when the feature is ready.\nFast and Lightweight: Git is designed to be fast and efficient, even for large projects.\nData Integrity: Every file and commit is checksummed, ensuring the integrity of your code.","category":"page"},{"location":"lecture/1-git/#Basic-Git-Commands","page":"Version Control: Introduction to Git","title":"Basic Git Commands","text":"","category":"section"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"git init: Initializes a new Git repository.\ngit clone [url]: Clones a repository from a remote server.\ngit add [file]: Stages a file for commit.\ngit commit -m \"[commit message]\": Commits the staged changes with a message.\ngit push: Pushes commits to a remote repository.\ngit pull: Fetches and merges changes from a remote repository.","category":"page"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"(Image: Alt text)","category":"page"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"Source: https://merely-useful.tech/py-rse/figures/git-cmdline/git-remote.png","category":"page"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"Here's a concise guide to a basic Git workflow, covering cloning a repository, creating a file, adding it to the repository, committing, and pushing the changes:","category":"page"},{"location":"lecture/1-git/#Basic-Git-Workflow","page":"Version Control: Introduction to Git","title":"Basic Git Workflow","text":"","category":"section"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"Create Repo on the Gitlab instance in the Webbrowser\nClone the Repository Clone the remote repository to your local machine:\ngit clone https://gitlab.mathematik.uni-stuttgart.de/user1234/repository\nCreate a New File Navigate to the cloned repository directory and create a new file:\ncd repository\ntouch newfile.txt\nAdd the File to Staging Add the new file to the staging area, preparing it for a commit:\ngit add newfile.txt\nCommit the File Commit the staged file with a descriptive message:\ngit commit -m \"Add newfile.txt 😎\"\nPush the Commit to Remote Repository Push the commit to the remote repository:\ngit push origin main","category":"page"},{"location":"lecture/1-git/#Gitignore","page":"Version Control: Introduction to Git","title":"Gitignore","text":"","category":"section"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"The .gitignore-file to ignore files in the Git (automatically generated files, build folders, ...)","category":"page"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"# content of .gitignore (dot means hidden file)\ndocs/build/*  # (star/asterix is placeholder/wildcard to ignore everything in that folder)","category":"page"},{"location":"lecture/1-git/#Getting-Started","page":"Version Control: Introduction to Git","title":"Getting Started","text":"","category":"section"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"To start using Git, first install it on your machine. Then, set up your user name and email with the following commands:","category":"page"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"","category":"page"},{"location":"lecture/1-git/#Further-reading","page":"Version Control: Introduction to Git","title":"Further reading","text":"","category":"section"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"https://aeturrell.github.io/coding-for-economists/wrkflow-version-control.html\nhttps://merely-useful.tech/py-rse/git-cmdline.html","category":"page"},{"location":"lecture/1-git/","page":"Version Control: Introduction to Git","title":"Version Control: Introduction to Git","text":"Explain gitignore and make example","category":"page"},{"location":"lecture/4-julia_testing/#Julia:-Testing","page":"Julia: Testing","title":"Julia: Testing","text":"","category":"section"},{"location":"lecture/4-julia_testing/#Importance-of-Testing","page":"Julia: Testing","title":"Importance of Testing","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Why testing is crucial in software development: Have working version in Git, document intended behavior of functions\nTypes of tests: Unit tests, integration tests, etc.","category":"page"},{"location":"lecture/4-julia_testing/#Unit-Tests-in-Julia","page":"Julia: Testing","title":"Unit Tests in Julia","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Using the Test standard library.","category":"page"},{"location":"lecture/4-julia_testing/#Writing-Unit-Tests","page":"Julia: Testing","title":"Writing Unit Tests","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Basic structure of a unit test: Valid Julia code with macro annotations (@)\nAssertions: @test, @test_throws, @testset, etc.","category":"page"},{"location":"lecture/4-julia_testing/#Example:-Unit-Test-Tutorial","page":"Julia: Testing","title":"Example: Unit Test Tutorial","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Let's create a simple function and write tests for it:","category":"page"},{"location":"lecture/4-julia_testing/#The-Function","page":"Julia: Testing","title":"The Function","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"function add(a, b)\n    return a + b\nend","category":"page"},{"location":"lecture/4-julia_testing/#Test-File","page":"Julia: Testing","title":"Test File","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Create a file named test_add.jl:","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"using Test\nusing SustainableSoftwareEngineering\n\n@testset \"Addition Tests\" begin\n    @test add(2, 2) == 4\n    @test add(-1, 1) == 0\n    @test add(0, 0) == 0\n    @test_throws DomainError add(\"a\", \"b\")\nend","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"This example demonstrates basic unit testing by checking various scenarios for the add function.","category":"page"},{"location":"lecture/4-julia_testing/#Invoking-the-Written-Tests","page":"Julia: Testing","title":"Invoking the Written Tests","text":"","category":"section"},{"location":"lecture/4-julia_testing/#Running-Tests-Locally","page":"Julia: Testing","title":"Running Tests Locally","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Once you have written your tests, it's important to know how to run them to check if your code behaves as expected.","category":"page"},{"location":"lecture/4-julia_testing/#Using-Julia's-Interactive-Session-(REPL)","page":"Julia: Testing","title":"Using Julia's Interactive Session (REPL)","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Start Julia's REPL: Open a terminal and run julia to start the interactive session.\nActivate the Project: If your project has a specific environment, activate it by using using Pkg; Pkg.activate(\"path_to_your_project\").\nRun the Tests: Use Pkg.test() to run all tests in the test directory of the project.","category":"page"},{"location":"lecture/4-julia_testing/#Using-the-Command-Line","page":"Julia: Testing","title":"Using the Command Line","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Alternatively, you can run your tests directly from the command line without entering the REPL:","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Navigate to your project directory.\nRun julia --project=@. -e 'using Pkg; Pkg.test()' (@. means to search for a folder with a Project.toml btw)","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"This command will execute all tests defined in your project's test directory.","category":"page"},{"location":"lecture/4-julia_testing/#An-example-output","page":"Julia: Testing","title":"An example output","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"The above testing file would yield a successful output:","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"julia> include(\"test/runtests.jl\")\n# Test Summary:  | Pass  Total  Time\n# Addition Tests |    4      4  0.0s","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"However, changing the above test file to:","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"using Test\nusing SustainableSoftwareEngineering\n\n@testset \"Addition Tests\" begin\n    @test add(2, 2) == 4\n    @test add(-1, 1) == 0\n    @test add(0, 0) == 1  # changed 🚨\n    @test_throws DomainError add(\"a\", \"b\")\nend","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"would result in an error:","category":"page"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"# Addition Tests: Test Failed at XXX/gits/nmh/SustainableSoftwareEngineering.jl/test/test_add.jl:7\n#   Expression: add(0, 0) == 1\n#    Evaluated: 0 == 1\n#\n# Stacktrace:\n#  [1] macro expansion\n#    @ /usr/local/Cellar/julia/1.9.3/share/julia/stdlib/v1.9/Test/src/Test.jl:478 [inlined]\n#  [2] macro expansion\n#    @ ~/Desktop/gits/nmh/SustainableSoftwareEngineering.jl/test/test_add.jl:7 [inlined]\n#  [3] macro expansion\n#    @ /usr/local/Cellar/julia/1.9.3/share/julia/stdlib/v1.9/Test/src/Test.jl:1498 [inlined]\n#  [4] top-level scope\n#    @ ~/Desktop/gits/nmh/SustainableSoftwareEngineering.jl/test/test_add.jl:5\n# Test Summary:  | Pass  Fail  Total  Time\n# Addition Tests |    3     1      4  0.8s","category":"page"},{"location":"lecture/4-julia_testing/#Optional","page":"Julia: Testing","title":"Optional","text":"","category":"section"},{"location":"lecture/4-julia_testing/#Test-Coverage","page":"Julia: Testing","title":"Test Coverage","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Adding coverage metrics to your test suite.\nInterpreting coverage reports to improve test quality.","category":"page"},{"location":"lecture/4-julia_testing/#Automatic-Testing-with-Continuous-Integration","page":"Julia: Testing","title":"Automatic Testing with Continuous Integration","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"Using CI for automatic testing whenever a commit happened in Git","category":"page"},{"location":"lecture/4-julia_testing/#Further-reading","page":"Julia: Testing","title":"Further reading","text":"","category":"section"},{"location":"lecture/4-julia_testing/","page":"Julia: Testing","title":"Julia: Testing","text":"For more detailed information, you can refer to the Julia documentation on testing.","category":"page"}]
}
